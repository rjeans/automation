apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 10m
  timeout: 20m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "78.3.1"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
      interval: 24h
  install:
    createNamespace: false
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  values:
    # Prometheus configuration
    prometheus:
      prometheusSpec:
        # Resource limits for Raspberry Pi
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        # Retention period
        retention: 15d
        retentionSize: "10GB"
        # Storage configuration with PVC
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 20Gi
        # Enable service monitors
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        # Add initContainer to fix permissions on PVC subdirectory
        # Note: Prometheus Operator mounts the PVC with subPath: "prometheus-db"
        # So we need to set permissions on that specific subdirectory
        initContainers:
          - name: fix-permissions
            image: busybox:latest
            command:
              - sh
              - -c
              - |
                # Create the subdirectory that will be mounted as subPath
                mkdir -p /prometheus/prometheus-db
                # Set ownership on the subdirectory (this is what gets mounted to /prometheus in the main container)
                chown -R 1000:2000 /prometheus/prometheus-db
                chmod -R 755 /prometheus/prometheus-db
            volumeMounts:
              - name: prometheus-kube-prometheus-stack-prometheus-db
                mountPath: /prometheus
            securityContext:
              runAsUser: 0
              runAsNonRoot: false
        # Security context for Prometheus container
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000

    # Grafana configuration
    grafana:
      enabled: true
      adminPassword: "admin"  # Change this in production
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        enabled: true
        size: 5Gi
      # Disable init container that tries to chown (doesn't work with Talos)
      initChownData:
        enabled: false
      # Set security context for proper volume permissions
      podSecurityContext:
        fsGroup: 472
        runAsUser: 472
        runAsGroup: 472
      # Grafana ingress
      ingress:
        enabled: true
        ingressClassName: traefik
        hosts:
          - grafana.jeansy.org
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
      # Pre-configured dashboards
      defaultDashboardsEnabled: true
      defaultDashboardsTimezone: UTC

    # Alertmanager configuration
    alertmanager:
      enabled: true
      alertmanagerSpec:
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi

    # Node exporter - collects hardware metrics
    nodeExporter:
      enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 32Mi
        limits:
          cpu: 200m
          memory: 128Mi

    # Kube-state-metrics - collects Kubernetes metrics
    kubeStateMetrics:
      enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 200m
          memory: 256Mi

    # Prometheus operator
    prometheusOperator:
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      # ARM64 compatibility
      admissionWebhooks:
        enabled: true
        patch:
          resources:
            requests:
              cpu: 50m
              memory: 32Mi
            limits:
              cpu: 200m
              memory: 128Mi
